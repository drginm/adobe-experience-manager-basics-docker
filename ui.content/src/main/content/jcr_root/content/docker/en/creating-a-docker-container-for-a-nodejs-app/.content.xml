<?xml version="1.0" encoding="UTF-8"?>
<jcr:root xmlns:sling="http://sling.apache.org/jcr/sling/1.0" xmlns:cq="http://www.day.com/jcr/cq/1.0" xmlns:jcr="http://www.jcp.org/jcr/1.0" xmlns:nt="http://www.jcp.org/jcr/nt/1.0"
    jcr:primaryType="cq:Page">
    <jcr:content
        cq:lastModified="{Date}2018-04-29T15:36:54.468-05:00"
        cq:lastModifiedBy="admin"
        cq:template="/apps/docker/templates/article-content"
        jcr:primaryType="cq:PageContent"
        jcr:title="Creating a Docker container for a Nodejs App"
        sling:resourceType="docker/components/structure/page">
        <logo
            jcr:primaryType="nt:unstructured"
            sling:resourceType="docker/components/structure/logo"/>
        <title
            jcr:primaryType="nt:unstructured"
            sling:resourceType="docker/components/content/title"/>
        <topnav
            jcr:primaryType="nt:unstructured"
            sling:resourceType="docker/components/structure/topnav"/>
        <par
            jcr:primaryType="nt:unstructured"
            sling:resourceType="wcm/foundation/components/parsys">
            <video
                jcr:created="{Date}2018-04-29T11:35:09.657-05:00"
                jcr:createdBy="admin"
                jcr:lastModified="{Date}2018-04-29T15:07:56.856-05:00"
                jcr:lastModifiedBy="admin"
                jcr:primaryType="nt:unstructured"
                sling:resourceType="docker/components/content/video"
                key="0w0lJn4O6YQ"/>
            <text
                jcr:lastModified="{Date}2018-04-29T15:36:54.466-05:00"
                jcr:lastModifiedBy="admin"
                jcr:primaryType="nt:unstructured"
                sling:resourceType="docker/components/content/text"
                text="&lt;p>This is a Docker tutorial for creating a NodeJs container using expressjs and mongoose, above is the vid and below you will find the steps followed.&amp;nbsp; Let's start!&lt;/p>&#xa;"
                textIsRich="true"/>
            <text_226285490
                jcr:created="{Date}2018-04-29T11:39:27.203-05:00"
                jcr:createdBy="admin"
                jcr:lastModified="{Date}2018-04-29T15:09:43.370-05:00"
                jcr:lastModifiedBy="admin"
                jcr:primaryType="nt:unstructured"
                sling:resourceType="docker/components/content/text"
                text="&lt;h3>Steps&lt;/h3>&#xa;&lt;ul>&#xa;&lt;li>Pre-reqs&lt;ul>&#xa;&lt;li>Have &lt;a href=&quot;https://nodejs.org/en/&quot;>node.js &lt;/a>installed&lt;/li>&#xa;&lt;li>And &lt;a href=&quot;https://www.docker.com/&quot;>docker&lt;/a> installed (make sure you have docker-compose as well)&lt;/li>&#xa;&lt;/ul>&#xa;&lt;/li>&#xa;&lt;li>Create an simple node app using expressjs and mongoose&lt;/li>&#xa;&lt;li>Modify your container and create a docker-compose file&lt;/li>&#xa;&lt;li>Build and Run your new container&lt;/li>&#xa;&lt;/ul>&#xa;&lt;h4>Create your simple node app&lt;/h4>&#xa;&lt;ul>&#xa;&lt;li>Initialize the node app&lt;ul>&#xa;&lt;li>&lt;i>&lt;b>npm init&lt;/b>&lt;/i>&lt;/li>&#xa;&lt;/ul>&#xa;&lt;/li>&#xa;&lt;li>Install the dependencies for our app&lt;ul>&#xa;&lt;li>&lt;i>&lt;b>npm install --save express mongoose&amp;nbsp;&lt;/b>&lt;/i>&lt;/li>&#xa;&lt;/ul>&#xa;&lt;/li>&#xa;&lt;li>Create the &lt;a href=&quot;https://github.com/drginm/docker-boilerplates/blob/master/node-express-mongo/web-site/database.js&quot;>database.js&lt;/a>&lt;/li>&#xa;&lt;li>Create the &lt;a href=&quot;https://github.com/drginm/docker-boilerplates/blob/master/node-express-mongo/web-site/index.js&quot;>index.js&lt;/a>&lt;/li>&#xa;&lt;/ul>&#xa;&lt;h4>Create a &lt;a href=&quot;https://github.com/drginm/docker-boilerplates/blob/master/node-express-mongo/web-site/Dockerfile&quot;>dockerfile&lt;/a>&lt;/h4>&#xa;&lt;ul>&#xa;&lt;li>Include container with node preinstalled:&amp;nbsp;&lt;ul>&#xa;&lt;li>&lt;i>&lt;b>FROM node&lt;/b>&lt;/i>&lt;/li>&#xa;&lt;/ul>&#xa;&lt;/li>&#xa;&lt;li>Create default/working directory:&amp;nbsp;&lt;ul>&#xa;&lt;li>&lt;i>&lt;b>WORKDIR /usr/src/app&lt;/b>&lt;/i>&lt;/li>&#xa;&lt;/ul>&#xa;&lt;/li>&#xa;&lt;li>Copy package.json to workdir and install dependencies (which we will need in this case\ud83d\ude0a): &lt;i>&lt;b>&amp;nbsp;&lt;/b>&lt;/i>&lt;ul>&#xa;&lt;li>&lt;i>&lt;b>COPY package.json .&lt;/b>&lt;/i>&lt;/li>&#xa;&lt;li>&lt;i>&lt;b>RUN npm install &lt;/b>&lt;/i>&lt;/li>&#xa;&lt;/ul>&#xa;&lt;/li>&#xa;&lt;li>Copy the rest of the app (just the index.js file in this case)&lt;ul>&#xa;&lt;li>&lt;b>&lt;i>COPY . .&lt;/i>&lt;/b>&lt;/li>&#xa;&lt;/ul>&#xa;&lt;/li>&#xa;&lt;li>Expose the port required for reaching our expressjs app&lt;ul>&#xa;&lt;li>&lt;i>&lt;b>EXPOSE 3000&lt;/b>&lt;/i>&lt;/li>&#xa;&lt;/ul>&#xa;&lt;/li>&#xa;&lt;li>Add a command to run when this container is started&lt;ul>&#xa;&lt;li>&lt;i>&lt;b>CMD [&amp;quot;node&amp;quot;, &amp;quot;index.js&amp;quot;]&lt;/b>&lt;/i>&lt;/li>&#xa;&lt;/ul>&#xa;&lt;/li>&#xa;&lt;/ul>&#xa;&lt;h4>Create a &lt;a href=&quot;https://github.com/drginm/docker-boilerplates/blob/master/node-express-mongo/docker-compose.yml&quot;>docker-compose.yml&lt;/a> file&lt;/h4>&#xa;&lt;ul>&#xa;&lt;li>Version for the docker-compose file:&lt;ul>&#xa;&lt;li>&lt;i>&lt;b>version: '3'&lt;/b>&lt;/i>&lt;/li>&#xa;&lt;/ul>&#xa;&lt;/li>&#xa;&lt;li>The list of services and their respective configurations:&amp;nbsp;&lt;ul>&#xa;&lt;li>&lt;i>&lt;b>services:&lt;/b>&lt;/i>&lt;/li>&#xa;&lt;/ul>&#xa;&lt;/li>&#xa;&lt;li>&lt;b>Our app service: web &lt;/b>&lt;i>&lt;b>&lt;br>&#xa;&lt;/b>&lt;/i>&lt;/li>&#xa;&lt;/ul>&#xa;&lt;ul>&#xa;&lt;li>&lt;b>Our database service: &lt;u>&lt;i>mongo&lt;/i>&lt;/u>&lt;/b>&lt;i>&lt;b>&lt;br>&#xa;&lt;/b>&lt;/i>&lt;ul>&#xa;&lt;li>The name of each service, used to identify each service and connect to them (the database connection should be: mongodb://&lt;u>&lt;i>&lt;b>mongo&lt;/b>&lt;/i>&lt;/u>/test):&lt;i>&lt;b>&lt;br>&#xa;&lt;/b>&lt;/i>&lt;ul>&#xa;&lt;li>&lt;u>&lt;i>&lt;b>mongo &lt;/b>&lt;/i>&lt;/u>&lt;/li>&#xa;&lt;/ul>&#xa;&lt;/li>&#xa;&lt;li>The name of the image that we want to reuse from &lt;a href=&quot;https://hub.docker.com/_/mongo/&quot;>dockerhub&lt;/a>&lt;ul>&#xa;&lt;li>&lt;b>&lt;i>image: docker-node-express-mongoapp&lt;/i>&lt;/b>&lt;/li>&#xa;&lt;/ul>&#xa;&lt;/li>&#xa;&lt;li>The ports to expose for this particular container&lt;ul>&#xa;&lt;li>&lt;b>&lt;i>ports:&lt;br>&#xa;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; - &amp;quot;27017:27017&amp;quot;&lt;/i>&lt;/b>&lt;/li>&#xa;&lt;/ul>&#xa;&lt;/li>&#xa;&lt;/ul>&#xa;&lt;/li>&#xa;&lt;li>&lt;b>An optional but useful service for browsing our database: adminmongo&lt;/b>&lt;ul>&#xa;&lt;li>The name of each service (doesn't need to have the same name as the service as seen for the first service):&lt;i>&lt;b>&lt;br>&#xa;&lt;/b>&lt;/i>&lt;ul>&#xa;&lt;li>&lt;i>&lt;b>&amp;nbsp;adminmongo&lt;/b>&lt;/i>&lt;/li>&#xa;&lt;/ul>&#xa;&lt;/li>&#xa;&lt;li>&lt;i>&lt;b>&amp;nbsp;&lt;/b>&lt;/i>The name of the image that we want to reuse from &lt;a href=&quot;https://hub.docker.com/r/mrvautin/adminmongo/&quot;>dockerhub&lt;/a>&lt;ul>&#xa;&lt;li>&lt;i>&lt;b>image: &amp;quot;mrvautin/adminmongo&amp;quot;&lt;/b>&lt;/i>&lt;/li>&#xa;&lt;/ul>&#xa;&lt;/li>&#xa;&lt;li>The ports to expose for this particular container&lt;ul>&#xa;&lt;li>&lt;i>&lt;b>ports:&lt;br>&#xa;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; - &amp;quot;1234:1234&amp;quot;&lt;/b>&lt;/i>&lt;/li>&#xa;&lt;/ul>&#xa;&lt;/li>&#xa;&lt;/ul>&#xa;&lt;/li>&#xa;&lt;li>&amp;nbsp;&lt;ul>&#xa;&lt;li>The name of each service, they can also work as a way to identify each service and connect to them within a container (for example you could connect to the mongo database using the name of the service: mongodb://&lt;u>&lt;i>&lt;b>mongo&lt;/b>&lt;/i>&lt;/u>/test):&lt;i>&lt;b>&lt;br>&#xa;&lt;/b>&lt;/i>&lt;ul>&#xa;&lt;li>&lt;i>&lt;b>web&lt;/b>&lt;/i>&lt;/li>&#xa;&lt;/ul>&#xa;&lt;/li>&#xa;&lt;li>The name of the image that we want to build&lt;ul>&#xa;&lt;li>&lt;b>&lt;i>image: docker-node-express-mongoapp&lt;/i>&lt;/b>&lt;/li>&#xa;&lt;/ul>&#xa;&lt;/li>&#xa;&lt;li>The folder in which the dockerfile is located (if you have everything in the same folder then just adding &amp;quot;build: ./&amp;quot; would suffice)&lt;ul>&#xa;&lt;li>&lt;b>&lt;i>build: ./web-site&lt;/i>&lt;/b>&lt;/li>&#xa;&lt;/ul>&#xa;&lt;/li>&#xa;&lt;li>the command to run when the container is up (this will override any CMD command on the dockerfile for that container)&lt;ul>&#xa;&lt;li>&lt;b>&lt;i>command: node index.js&lt;/i>&lt;/b>&lt;/li>&#xa;&lt;/ul>&#xa;&lt;/li>&#xa;&lt;li>The ports to expose and to which ports on the host machine to map them (&lt;i>&lt;b>host-port&lt;/b>&lt;/i>:&lt;i>&lt;b>container-port&lt;/b>&lt;/i>)&lt;ul>&#xa;&lt;li>&lt;b>&lt;i>ports:&lt;br>&#xa;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; - &amp;quot;3000:3000&amp;quot;&lt;/i>&lt;/b>&lt;/li>&#xa;&lt;/ul>&#xa;&lt;/li>&#xa;&lt;li>Which folders from the host machine should be shared to the container, here we are using the &lt;a href=&quot;http://jdlm.info/articles/2016/03/06/lessons-building-node-app-docker.html&quot;>Volume Trick&lt;/a> (Which I've tested and works everywhere but on the &lt;a href=&quot;https://docs.docker.com/toolbox/overview/&quot;>Docker toolbox&lt;/a>), it will allow us to make changes to our app code and still work.&lt;ul>&#xa;&lt;li>&lt;b>&lt;i>volumes:&lt;br>&#xa;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; - ./web-site:/usr/src/app&lt;br>&#xa;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; - /usr/src/app/node_modules&lt;/i>&lt;/b>&lt;/li>&#xa;&lt;/ul>&#xa;&lt;/li>&#xa;&lt;li>Declare that we require the mongo container to be up and running before the current one&lt;ul>&#xa;&lt;li>&lt;i>&lt;b>depends_on:&lt;br>&#xa;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; - &amp;quot;mongo&amp;quot;&lt;/b>&lt;/i>&lt;/li>&#xa;&lt;/ul>&#xa;&lt;/li>&#xa;&lt;li>Add a command to run when this container is started&lt;ul>&#xa;&lt;li>&lt;i>&lt;b>CMD [&amp;quot;node&amp;quot;, &amp;quot;index.js&amp;quot;]&lt;/b>&lt;/i>&lt;/li>&#xa;&lt;/ul>&#xa;&lt;/li>&#xa;&lt;/ul>&#xa;&lt;/li>&#xa;&lt;/ul>&#xa;&lt;h4>Build &amp;amp;amp; Run&lt;/h4>&#xa;&lt;ul>&#xa;&lt;li>Build the container:&lt;ul>&#xa;&lt;li>&lt;i>&lt;b>docker-compose build&lt;/b>&lt;/i>&lt;/li>&#xa;&lt;/ul>&#xa;&lt;/li>&#xa;&lt;li>Run the container&lt;ul>&#xa;&lt;li>&lt;i>&lt;b>&lt;i>&lt;b>docker-compose up&lt;/b>&lt;/i>&lt;/b>&lt;/i>&lt;/li>&#xa;&lt;/ul>&#xa;&lt;/li>&#xa;&lt;li>If you don't know the ip for your newly created node+express app use the ip used by the docker machine&lt;ul>&#xa;&lt;li>&lt;i>&lt;b>&lt;i>&lt;b>docker-machine ip&lt;/b>&lt;/i>&lt;/b>&lt;/i>&lt;/li>&#xa;&lt;/ul>&#xa;&lt;/li>&#xa;&lt;li>Open the app in your browser&lt;i>&lt;b>&lt;i>&lt;b> &lt;/b>&lt;/i>&lt;/b>&lt;/i>&lt;ul>&#xa;&lt;li>&lt;i>&lt;b>&lt;i>&lt;b>&lt;i>&lt;b>&lt;i>&lt;b>http://THE-IP&lt;/b>&lt;/i>&lt;/b>&lt;/i>:3000/testFind&lt;/b>&lt;/i>&lt;/b>&lt;/i>&lt;/li>&#xa;&lt;/ul>&#xa;&lt;/li>&#xa;&lt;li>If you want to browse the database open the mongo admin and add&lt;i>&lt;b>&lt;i>&lt;b> &amp;quot;mongodb://&lt;u>&lt;i>&lt;b>mongo&lt;/b>&lt;/i>&lt;/u>/test&amp;quot;&lt;/b>&lt;/i>&lt;/b>&lt;/i> as the database connection and choose whatever name you like&lt;br>&#xa;&lt;ul>&#xa;&lt;li>&lt;i>&lt;b>&lt;i>&lt;b>http://&lt;i>&lt;b>&lt;i>&lt;b>&lt;i>&lt;b>&lt;i>&lt;b>THE-IP&lt;/b>&lt;/i>&lt;/b>&lt;/i>&lt;/b>&lt;/i>&lt;/b>&lt;/i>:1234/&lt;/b>&lt;/i>&lt;/b>&lt;/i>&lt;/li>&#xa;&lt;/ul>&#xa;&lt;/li>&#xa;&lt;/ul>&#xa;&lt;h4>Resources&lt;/h4>&#xa;&lt;p>&lt;a href=&quot;https://nodejs.org/en/docs/guides/nodejs-docker-webapp/&quot;>Dockerizing a Node.js web app&lt;/a>&lt;/p>&#xa;&lt;p>&lt;a href=&quot;http://jdlm.info/articles/2016/03/06/lessons-building-node-app-docker.html&quot;>Lessons from Building a Node App in Docker&lt;/a>&lt;/p>&#xa;"
                textIsRich="true"/>
        </par>
    </jcr:content>
</jcr:root>
